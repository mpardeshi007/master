{
	"info": {
		"_postman_id": "jwt-auth-collection-2025",
		"name": "JWT Authentication System - BNY Team Project",
		"description": "Complete testing collection for Spring Boot JWT Authentication System with user login and server-to-server authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User Login - Regular User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.not.be.undefined;",
									"    pm.expect(jsonData.username).to.eql('user');",
									"    pm.expect(jsonData.roles).to.include('ROLE_USER');",
									"    ",
									"    // Save token to environment",
									"    pm.environment.set('userToken', jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user\",\n    \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JWT token for admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.not.be.undefined;",
									"    pm.expect(jsonData.username).to.eql('admin');",
									"    pm.expect(jsonData.roles).to.include('ROLE_ADMIN');",
									"    pm.expect(jsonData.roles).to.include('ROLE_USER');",
									"    ",
									"    // Save admin token to environment",
									"    pm.environment.set('adminToken', jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"Admin has multiple roles\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.be.above(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Server Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Server token generated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.not.be.undefined;",
									"    pm.expect(jsonData.username).to.eql('service-a');",
									"    pm.expect(jsonData.roles).to.include('SERVER');",
									"    ",
									"    // Save server token to environment",
									"    pm.environment.set('serverToken', jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"Token type is Bearer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.eql('Bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serverName\": \"service-a\",\n    \"roles\": [\"SERVER\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/server-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"server-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Login Attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 for invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"No token in response for invalid login\", function () {",
									"    // Response might be empty or have error message",
									"    pm.expect(pm.response.text()).to.not.include('accessToken');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"invaliduser\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have a user token to validate",
									"if (!pm.environment.get('userToken')) {",
									"    throw new Error('Please run \"User Login - Regular User\" first to get a token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token validation successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql('user');",
									"    pm.expect(jsonData.roles).to.include('ROLE_USER');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Public Endpoints",
			"item": [
				{
					"name": "Public Hello Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Public endpoint accessible without token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('public endpoint');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/public/hello",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"hello"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Protected User Endpoints",
			"item": [
				{
					"name": "User Protected Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('userToken')) {",
									"    throw new Error('Please run \"User Login - Regular User\" first to get a token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User can access user protected endpoint\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Hello user');",
									"    pm.expect(jsonData.username).to.eql('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/protected/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current User Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('userToken')) {",
									"    throw new Error('Please run \"User Login - Regular User\" first to get a token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Current user info returned correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql('user');",
									"    pm.expect(jsonData.authenticated).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/current-user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"current-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Denied - User tries Admin Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('userToken')) {",
									"    throw new Error('Please run \"User Login - Regular User\" first to get a token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 for insufficient privileges\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Access denied message\", function () {",
									"    // Spring Security typically returns 403 with access denied",
									"    pm.expect(pm.response.status).to.eql('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/dashboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"dashboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Only Endpoints",
			"item": [
				{
					"name": "Admin Dashboard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('adminToken')) {",
									"    throw new Error('Please run \"Admin Login\" first to get admin token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Admin can access dashboard\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Admin Dashboard');",
									"    pm.expect(jsonData.username).to.eql('admin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/dashboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"dashboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Server-to-Server Communication",
			"item": [
				{
					"name": "Server Status Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('serverToken')) {",
									"    throw new Error('Please run \"Generate Server Token\" first to get server token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Server-to-server communication successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Server-to-Server communication successful');",
									"    pm.expect(jsonData.serverName).to.eql('service-a');",
									"    pm.expect(jsonData.timestamp).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{serverToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/server/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"server",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Server Data Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('serverToken')) {",
									"    throw new Error('Please run \"Generate Server Token\" first to get server token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Server data processed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Data received from server');",
									"    pm.expect(jsonData.receivedData).to.not.be.undefined;",
									"    pm.expect(jsonData.receivedData.message).to.eql('Hello from Service A');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{serverToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Hello from Service A\",\n    \"timestamp\": {{$timestamp}},\n    \"data\": {\n        \"operation\": \"sync\",\n        \"records\": 150,\n        \"status\": \"completed\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/server/data",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"server",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Access to Server Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('userToken')) {",
									"    throw new Error('Please run \"User Login - Regular User\" first to get a token');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 for non-server token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"User token cannot access server endpoint\", function () {",
									"    pm.expect(pm.response.status).to.eql('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/server/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"server",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security Tests",
			"item": [
				{
					"name": "Access Without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 for missing token\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Unauthorized access blocked\", function () {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/protected/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access With Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 for invalid token\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Invalid token rejected\", function () {",
									"    pm.expect(pm.response.status).to.eql('Unauthorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.jwt.token"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/protected/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"user"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:8080');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to ensure response time is reasonable",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
