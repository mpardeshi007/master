{"ast":null,"code":"class AuthService {\n  constructor() {\n    this.API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n  }\n\n  // Login with username and password\n  async login(username, password) {\n    try {\n      const response = await fetch(`${this.API_URL}/api/auth/signin`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.token) {\n        // Store JWT token and user info\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify({\n          username: data.username,\n          roles: data.roles\n        }));\n        return data;\n      } else {\n        throw new Error('No token received from server');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Logout\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  // Get current user info\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      try {\n        return JSON.parse(userStr);\n      } catch (e) {\n        console.error('Error parsing user data:', e);\n        return null;\n      }\n    }\n    return null;\n  }\n\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      // Basic check if token exists and is not expired\n      const tokenData = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      if (tokenData.exp < currentTime) {\n        this.logout();\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      this.logout();\n      return false;\n    }\n  }\n\n  // Validate token with backend\n  async validateToken() {\n    const token = this.getToken();\n    if (!token) {\n      throw new Error('No token found');\n    }\n    try {\n      const response = await fetch(`${this.API_URL}/api/auth/validate`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Token validation failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Token validation error:', error);\n      this.logout();\n      throw error;\n    }\n  }\n\n  // Get auth header for API requests\n  getAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      return {\n        'Authorization': `Bearer ${token}`\n      };\n    }\n    return {};\n  }\n\n  // Check if user has specific role\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user && user.roles && user.roles.includes(role);\n  }\n\n  // Check if user is admin\n  isAdmin() {\n    return this.hasRole('ADMIN');\n  }\n\n  // Make authenticated API request\n  async makeAuthenticatedRequest(url, options = {}) {\n    const token = this.getToken();\n    if (!token) {\n      throw new Error('No authentication token available');\n    }\n    const authOptions = {\n      ...options,\n      headers: {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      const response = await fetch(`${this.API_URL}${url}`, authOptions);\n      if (response.status === 401) {\n        // Token expired, logout user\n        this.logout();\n        throw new Error('Session expired. Please login again.');\n      }\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Authenticated request error:', error);\n      throw error;\n    }\n  }\n\n  // Refresh token if needed (placeholder for future implementation)\n  async refreshToken() {\n    // Implementation depends on backend support for refresh tokens\n    console.log('Token refresh not implemented yet');\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["AuthService","constructor","API_URL","process","env","REACT_APP_API_URL","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","catch","Error","message","status","statusText","data","token","localStorage","setItem","roles","error","console","logout","removeItem","getCurrentUser","userStr","getItem","parse","e","getToken","isAuthenticated","tokenData","atob","split","currentTime","Date","now","exp","validateToken","getAuthHeader","hasRole","role","user","includes","isAdmin","makeAuthenticatedRequest","url","options","authOptions","refreshToken","log","authService"],"sources":["C:/Users/797609/Downloads/BNY team project - backup/ui-code-base/src/services/authService.js"],"sourcesContent":["class AuthService {\n  constructor() {\n    this.API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n  }\n\n  // Login with username and password\n  async login(username, password) {\n    try {\n      const response = await fetch(`${this.API_URL}/api/auth/signin`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ username, password })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.token) {\n        // Store JWT token and user info\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify({\n          username: data.username,\n          roles: data.roles\n        }));\n        return data;\n      } else {\n        throw new Error('No token received from server');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Logout\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  // Get current user info\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      try {\n        return JSON.parse(userStr);\n      } catch (e) {\n        console.error('Error parsing user data:', e);\n        return null;\n      }\n    }\n    return null;\n  }\n\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n\n    try {\n      // Basic check if token exists and is not expired\n      const tokenData = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      \n      if (tokenData.exp < currentTime) {\n        this.logout();\n        return false;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      this.logout();\n      return false;\n    }\n  }\n\n  // Validate token with backend\n  async validateToken() {\n    const token = this.getToken();\n    if (!token) {\n      throw new Error('No token found');\n    }\n\n    try {\n      const response = await fetch(`${this.API_URL}/api/auth/validate`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Token validation failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Token validation error:', error);\n      this.logout();\n      throw error;\n    }\n  }\n\n  // Get auth header for API requests\n  getAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      return { 'Authorization': `Bearer ${token}` };\n    }\n    return {};\n  }\n\n  // Check if user has specific role\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user && user.roles && user.roles.includes(role);\n  }\n\n  // Check if user is admin\n  isAdmin() {\n    return this.hasRole('ADMIN');\n  }\n\n  // Make authenticated API request\n  async makeAuthenticatedRequest(url, options = {}) {\n    const token = this.getToken();\n    \n    if (!token) {\n      throw new Error('No authentication token available');\n    }\n\n    const authOptions = {\n      ...options,\n      headers: {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const response = await fetch(`${this.API_URL}${url}`, authOptions);\n      \n      if (response.status === 401) {\n        // Token expired, logout user\n        this.logout();\n        throw new Error('Session expired. Please login again.');\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Authenticated request error:', error);\n      throw error;\n    }\n  }\n\n  // Refresh token if needed (placeholder for future implementation)\n  async refreshToken() {\n    // Implementation depends on backend support for refresh tokens\n    console.log('Token refresh not implemented yet');\n  }\n}\n\nconst authService = new AuthService();\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}